language ESSENCE' 1.0

given maxMaterial: int
given fin1: int
given fin2: int
given quantity_Function1D: matrix indexed by [int(1..5)] of int(0..fin2)
given fin3: int
given fin4: int
given capacity_Function1D: matrix indexed by [int(1..3)] of int(0..fin4)
letting let1 be sum([quantity_Function1D[m] | m : int(1..5)])
find colour_Function1DPartial_Flags: matrix indexed by [int(1..let1)] of bool
find colour_Function1DPartial_Values: matrix indexed by [int(1..let1)] of int(1..3)
letting let2 be max([capacity_Function1D[q136] | q136 : int(1..3)])
find contents_Function1DPartialR8_Flags: matrix indexed by [int(1..let1)] of bool
find contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags:
        matrix indexed by [int(1..let1), int(1..let2)] of int(0..maxMaterial)
find contents_Function1DPartialR8_Values_ExplicitWithFlags_Values:
        matrix indexed by [int(1..let1), int(1..let2)] of int(1..5)
branching on
    [colour_Function1DPartial_Flags, colour_Function1DPartial_Values, contents_Function1DPartialR8_Flags,
     contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags,
     contents_Function1DPartialR8_Values_ExplicitWithFlags_Values]
find conjure_aux1_Function1DPartial_Flags:
        matrix indexed by [matrix indexed by [int(1..let1)] of int(1..let1),
                           matrix indexed by [int(1..let1)] of int(1..let1), int(1..let1)] of
            bool
find conjure_aux1_Function1DPartial_Values:
        matrix indexed by [matrix indexed by [int(1..let1)] of int(1..let1),
                           matrix indexed by [int(1..let1)] of int(1..let1), int(1..let1)] of
            int(1..3)
find conjure_aux2_Function1DPartialR8_Flags:
        matrix indexed by [matrix indexed by [int(1..let1)] of int(1..let1),
                           matrix indexed by [int(1..let1)] of int(1..let1), int(1..let1)] of
            bool
find conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags:
        matrix indexed by [matrix indexed by [int(1..let1)] of int(1..let1),
                           matrix indexed by [int(1..let1)] of int(1..let1), int(1..let1), int(1..let2)] of
            int(0..maxMaterial)
find conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values:
        matrix indexed by [matrix indexed by [int(1..let1)] of int(1..let1),
                           matrix indexed by [int(1..let1)] of int(1..let1), int(1..let1), int(1..let2)] of
            int(1..5)
minimising sum([toInt(colour_Function1DPartial_Flags[q185]) | q185 : int(1..let1)])
such that
    and([colour_Function1DPartial_Flags[b] <-> contents_Function1DPartialR8_Flags[b] | b : int(1..let1)]),
    and([sum([toInt(contents_Function1DPartialR8_Flags[q19]) *
              catchUndef(sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q19, q17] = q1) *
                              catchUndef(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q19, q17], 0)
                                  | q17 : int(1..let2)]),
                         0)
                  | q19 : int(1..let1)])
         = quantity_Function1D[q1]
         /\
         and([contents_Function1DPartialR8_Flags[q19] -> contents_Function1DPartialR8_Flags[q19] | q19 : int(1..let1)])
             | q1 : int(1..5)]),
    and([colour_Function1DPartial_Flags[q140] ->
         and([sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q140, q138] > 0) *
                   catchUndef(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q140, q138], 0)
                       | q138 : int(1..let2)])
              <= capacity_Function1D[colour_Function1DPartial_Values[q140]],
              contents_Function1DPartialR8_Flags[q140], colour_Function1DPartial_Flags[q140];
                  int(1..3)])
             | q140 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q146] ->
         (colour_Function1DPartial_Values[q146] = 1 /\ colour_Function1DPartial_Flags[q146] ->
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q146, q142] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q146, q142] = 2
                    | q142 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q146])
          /\
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q146, q144] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q146, q144] = 3
                    | q144 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q146]))
             | q146 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q152] ->
         (colour_Function1DPartial_Values[q152] = 3 /\ colour_Function1DPartial_Flags[q152] ->
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q152, q148] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q152, q148] = 4
                    | q148 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q152])
          /\
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q152, q150] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q152, q150] = 2
                    | q150 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q152]))
             | q152 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q158] ->
         (colour_Function1DPartial_Values[q158] = 2 /\ colour_Function1DPartial_Flags[q158] ->
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q158, q154] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q158, q154] = 3
                    | q154 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q158])
          /\
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q158, q156] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q158, q156] = 1
                    | q156 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q158]))
             | q158 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q161] ->
         (colour_Function1DPartial_Values[q161] = 1 /\ colour_Function1DPartial_Flags[q161] ->
          sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q161, q159] = 4) *
               catchUndef(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q161, q159], 0)
                   | q159 : int(1..let2)])
          <= 1
          /\ contents_Function1DPartialR8_Flags[q161])
             | q161 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q164] ->
         (colour_Function1DPartial_Values[q164] = 2 /\ colour_Function1DPartial_Flags[q164] ->
          sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q164, q162] = 4) *
               catchUndef(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q164, q162], 0)
                   | q162 : int(1..let2)])
          <= 2
          /\ contents_Function1DPartialR8_Flags[q164])
             | q164 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q170] ->
         (or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q170, q168] > 0 /\
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q170, q168] = 4
                  | q168 : int(1..let2)])
          /\ contents_Function1DPartialR8_Flags[q170]
          ->
          or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q170, q166] > 0 /\
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q170, q166] = 2
                  | q166 : int(1..let2)])
          /\ contents_Function1DPartialR8_Flags[q170])
             | q170 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q176] ->
         (or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q176, q174] > 0 /\
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q176, q174] = 1
                  | q174 : int(1..let2)])
          /\ contents_Function1DPartialR8_Flags[q176]
          ->
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q176, q172] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q176, q172] = 5
                    | q172 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q176]))
             | q176 : int(1..let1)]),
    and([colour_Function1DPartial_Flags[q182] ->
         (or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q182, q180] > 0 /\
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q182, q180] = 5
                  | q180 : int(1..let2)])
          /\ contents_Function1DPartialR8_Flags[q182]
          ->
          !(or([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q182, q178] > 0 /\
                contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q182, q178] = 2
                    | q178 : int(1..let2)])
            /\ contents_Function1DPartialR8_Flags[q182]))
             | q182 : int(1..let1)]),
    and([and([conjure_aux1_Function1DPartial_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q36]
              = false
              ->
              conjure_aux1_Function1DPartial_Values
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q36]
              = 1 | q36 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([colour_Function1DPartial_Flags[q33] ->
              sum([toInt(conjure_aux1_Function1DPartial_Flags
                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q39])
                   *
                   catchUndef(conjure_aux1_Function1DPartial_Values
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q39],
                              0)
                       | q39 : int(1..let1),
                         q39 =
                         [q33, catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q33], 0);
                              int(1..2)]
                             [toInt(or([q29 = q33 | q29 : int(1..let1)])) + 1]])
              = colour_Function1DPartial_Values[q33]
              /\
              or([conjure_aux1_Function1DPartial_Flags
                      [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                       q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q40]
                  /\
                  q40 =
                  [q33, catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q33], 0); int(1..2)]
                      [toInt(or([q29 = q33 | q29 : int(1..let1)])) + 1]
                      | q40 : int(1..let1)])
                  | q33 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux1_Function1DPartial_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q41]
              ->
              colour_Function1DPartial_Values
                  [[q41, catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q41], 0);
                        int(1..2)]
                       [toInt(or([q35 = q41 | q35 : int(1..let1)])) + 1]]
              =
              conjure_aux1_Function1DPartial_Values
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q41]
              /\
              colour_Function1DPartial_Flags
                  [[q41, catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q41], 0);
                        int(1..2)]
                       [toInt(or([q35 = q41 | q35 : int(1..let1)])) + 1]]
                  | q41 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux2_Function1DPartialR8_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q68]
              = false
              ->
              and([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q68, q78]
                   = 0 | q78 : int(1..let2)])
              /\
              and([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q68, q79]
                   = 1 | q79 : int(1..let2)])
                  | q68 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux2_Function1DPartialR8_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70]
              ->
              and([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q71 + 1]
                   > 0
                   ->
                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q71]
                   <
                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q71 + 1]
                       | q71 : int(1..let2 - 1)])
                  | q70 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux2_Function1DPartialR8_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70]
              ->
              and([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q72]
                   = 0
                   ->
                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q72]
                   = 1 | q72 : int(1..let2)])
                  | q70 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux2_Function1DPartialR8_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70]
              ->
              and([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q73 + 1]
                   > 0
                   ->
                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q73]
                   > 0 | q73 : int(1..let2 - 1)])
                  | q70 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux2_Function1DPartialR8_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70]
              ->
              sum([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q70, q76]
                       | q76 : int(1..let2)])
              <= let2
                  | q70 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([contents_Function1DPartialR8_Flags[q56] ->
              and([conjure_aux2_Function1DPartialR8_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q80]
                   /\
                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q80, q83]
                   > 0
                   ->
                   sum([toInt(conjure_aux2_Function1DPartialR8_Flags
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q81]
                              /\
                              conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q81, q82]
                              > 0)
                        *
                        catchUndef(toInt(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q81,
                                              q82]
                                         =
                                         conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q80,
                                              q83])
                                   *
                                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q81, q82],
                                   0)
                            | q81 : int(1..let1), q82 : int(1..let2),
                              q81 =
                              [q56,
                               catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q56], 0);
                                   int(1..2)]
                                  [toInt(or([q44 = q56 | q44 : int(1..let1)])) + 1]])
                   =
                   sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q56, q57] > 0) *
                        catchUndef(toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q56, q57] =
                                         conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q80,
                                              q83])
                                   * contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q56, q57],
                                   0)
                            | q57 : int(1..let2)])
                       | q80 : int(1..let1), q83 : int(1..let2),
                         q80 =
                         [q56, catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q56], 0);
                              int(1..2)]
                             [toInt(or([q44 = q56 | q44 : int(1..let1)])) + 1]])
              /\
              and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q56, q59] > 0 ->
                   sum([toInt(conjure_aux2_Function1DPartialR8_Flags
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q84]
                              /\
                              conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q84, q85]
                              > 0)
                        *
                        catchUndef(toInt(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q84,
                                              q85]
                                         = contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q56, q59])
                                   *
                                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q84, q85],
                                   0)
                            | q84 : int(1..let1), q85 : int(1..let2),
                              q84 =
                              [q56,
                               catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q56], 0);
                                   int(1..2)]
                                  [toInt(or([q44 = q56 | q44 : int(1..let1)])) + 1]])
                   =
                   sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q56, q58] > 0) *
                        catchUndef(toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q56, q58] =
                                         contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q56, q59])
                                   * contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q56, q58],
                                   0)
                            | q58 : int(1..let2)])
                       | q59 : int(1..let2)])
                  | q56 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([conjure_aux2_Function1DPartialR8_Flags
                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86]
              ->
              and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [[q86, catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q86], 0);
                             int(1..2)]
                            [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                        q63]
                   > 0
                   ->
                   sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                  [[q86,
                                    catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q86],
                                               0);
                                        int(1..2)]
                                       [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                                   q64]
                              =
                              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                  [[q86,
                                    catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q86],
                                               0);
                                        int(1..2)]
                                       [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                                   q63])
                        *
                        catchUndef(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                       [[q86,
                                         catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                                                        [q86],
                                                    0);
                                             int(1..2)]
                                            [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                                        q64],
                                   0)
                            | q64 : int(1..let2)])
                   =
                   sum([toInt(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86, q87]
                              > 0)
                        *
                        catchUndef(toInt(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86,
                                              q87]
                                         =
                                         contents_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [[q86,
                                               catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                                                              [q86],
                                                          0);
                                                   int(1..2)]
                                                  [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                                              q63])
                                   *
                                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86, q87],
                                   0)
                            | q87 : int(1..let2)])
                       | q63 : int(1..let2)])
              /\
              and([conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86, q89]
                   > 0
                   ->
                   sum([toInt(contents_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                  [[q86,
                                    catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q86],
                                               0);
                                        int(1..2)]
                                       [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                                   q66]
                              =
                              conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86, q89])
                        *
                        catchUndef(contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                       [[q86,
                                         catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                                                        [q86],
                                                    0);
                                             int(1..2)]
                                            [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1],
                                        q66],
                                   0)
                            | q66 : int(1..let2)])
                   =
                   sum([toInt(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86, q88]
                              > 0)
                        *
                        catchUndef(toInt(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86,
                                              q88]
                                         =
                                         conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                             [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                              q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86,
                                              q89])
                                   *
                                   conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q86, q88],
                                   0)
                            | q88 : int(1..let2)])
                       | q89 : int(1..let2)])
              /\
              contents_Function1DPartialR8_Flags
                  [[q86, catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q86], 0);
                        int(1..2)]
                       [toInt(or([q61 = q86 | q61 : int(1..let1)])) + 1]]
                  | q86 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([flatten([flatten([[-toInt(colour_Function1DPartial_Flags[q102]); int(1)],
                           [colour_Function1DPartial_Values[q102]; int(1)];
                               int(1..2)])
                      | q102 : int(1..let1)])
         <lex
         flatten([flatten([[-toInt(conjure_aux1_Function1DPartial_Flags
                                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q103]);
                                int(1)],
                           [conjure_aux1_Function1DPartial_Values
                                [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                 q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q103];
                                int(1)];
                               int(1..2)])
                      | q103 : int(1..let1)])
         \/
         and([colour_Function1DPartial_Flags[q97] ->
              colour_Function1DPartial_Values
                  [[q97, catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q97], 0);
                        int(1..2)]
                       [toInt(or([q96 = q97 | q96 : int(1..let1)])) + 1]]
              = colour_Function1DPartial_Values[q97]
              /\
              colour_Function1DPartial_Flags
                  [[q97, catchUndef(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q97], 0);
                        int(1..2)]
                       [toInt(or([q96 = q97 | q96 : int(1..let1)])) + 1]]
                  | q97 : int(1..let1)])
         /\
         and([colour_Function1DPartial_Flags[q101] ->
              colour_Function1DPartial_Values
                  [[q101, catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q101], 0);
                        int(1..2)]
                       [toInt(or([q100 = q101 | q100 : int(1..let1)])) + 1]]
              = colour_Function1DPartial_Values[q101]
              /\
              colour_Function1DPartial_Flags
                  [[q101, catchUndef(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q101], 0);
                        int(1..2)]
                       [toInt(or([q100 = q101 | q100 : int(1..let1)])) + 1]]
                  | q101 : int(1..let1)])
         /\
         flatten([flatten([[-toInt(contents_Function1DPartialR8_Flags[q90]); int(1)],
                           flatten([flatten([[-contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q90, q91];
                                                  int(1)],
                                             [contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q90, q91];
                                                  int(1)];
                                                 int(1..2)])
                                        | q91 : int(1..let2)]);
                               int(1..2)])
                      | q90 : int(1..let1)])
         <=lex
         flatten([flatten([[-toInt(conjure_aux2_Function1DPartialR8_Flags
                                       [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                        q2_PermutationAsFunction_PermutationFunction_backwards_Function1D, q92]);
                                int(1)],
                           flatten([flatten([[-conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags
                                                   [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                                    q2_PermutationAsFunction_PermutationFunction_backwards_Function1D,
                                                    q92, q93];
                                                  int(1)],
                                             [conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values
                                                  [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                                   q2_PermutationAsFunction_PermutationFunction_backwards_Function1D,
                                                   q92, q93];
                                                  int(1)];
                                                 int(1..2)])
                                        | q93 : int(1..let2)]);
                               int(1..2)])
                      | q92 : int(1..let1)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                            | q22 : int(1..let1)])
                        | q21 : int(1..let1)]),
               allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                            | q25 : int(1..let1)])
                        | q24 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)]),
               and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                    = q20
                        | q20 : int(1..let1)])]),
    and([and([and([dontCare(conjure_aux1_Function1DPartial_Flags[q104, q105, q106])
                       | q104 : matrix indexed by [int(1..let1)] of int(1..let1),
                         q105 : matrix indexed by [int(1..let1)] of int(1..let1), q106 : int(1..let1)]),
              and([dontCare(conjure_aux1_Function1DPartial_Values[q109, q110, q111])
                       | q109 : matrix indexed by [int(1..let1)] of int(1..let1),
                         q110 : matrix indexed by [int(1..let1)] of int(1..let1), q111 : int(1..let1)]),
              and([dontCare(conjure_aux2_Function1DPartialR8_Flags[q114, q115, q116])
                       | q114 : matrix indexed by [int(1..let1)] of int(1..let1),
                         q115 : matrix indexed by [int(1..let1)] of int(1..let1), q116 : int(1..let1)]),
              and([dontCare(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q119, q120, q121, q122])
                       | q119 : matrix indexed by [int(1..let1)] of int(1..let1),
                         q120 : matrix indexed by [int(1..let1)] of int(1..let1), q121 : int(1..let1),
                         q122 : int(1..let2)]),
              and([dontCare(conjure_aux2_Function1DPartialR8_Values_ExplicitWithFlags_Values[q125, q126, q127, q128])
                       | q125 : matrix indexed by [int(1..let1)] of int(1..let1),
                         q126 : matrix indexed by [int(1..let1)] of int(1..let1), q127 : int(1..let1),
                         q128 : int(1..let2)]);
                  int(1..5)])
             | q2_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                      int(1..let1),
               q2_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..let1)] of
                                                                                       int(1..let1),
               !allDiff(q2_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               !and([or([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q22] = q21
                             | q22 : int(1..let1)])
                         | q21 : int(1..let1)]),
               false, !allDiff(q2_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               !and([or([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q25] = q24
                             | q25 : int(1..let1)])
                         | q24 : int(1..let1)]),
               false,
               !and([q2_PermutationAsFunction_PermutationFunction_backwards_Function1D
                         [q2_PermutationAsFunction_PermutationFunction_forwards_Function1D[q20]]
                     = q20
                         | q20 : int(1..let1)]),
               !and([q2_PermutationAsFunction_PermutationFunction_forwards_Function1D
                         [q2_PermutationAsFunction_PermutationFunction_backwards_Function1D[q20]]
                     = q20
                         | q20 : int(1..let1)])]),
    and([colour_Function1DPartial_Flags[q3] = false -> colour_Function1DPartial_Values[q3] = 1 | q3 : int(1..let1)]),
    and([contents_Function1DPartialR8_Flags[q7] = false ->
         and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q7, q134] = 0 | q134 : int(1..let2)]) /\
         and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q7, q135] = 1 | q135 : int(1..let2)])
             | q7 : int(1..let1)]),
    and([contents_Function1DPartialR8_Flags[q9] ->
         and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q9, q10 + 1] > 0 ->
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q9, q10] <
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q9, q10 + 1]
                  | q10 : int(1..let2 - 1)])
             | q9 : int(1..let1)]),
    and([contents_Function1DPartialR8_Flags[q9] ->
         and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q9, q11] = 0 ->
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Values[q9, q11] = 1
                  | q11 : int(1..let2)])
             | q9 : int(1..let1)]),
    and([contents_Function1DPartialR8_Flags[q9] ->
         and([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q9, q12 + 1] > 0 ->
              contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q9, q12] > 0
                  | q12 : int(1..let2 - 1)])
             | q9 : int(1..let1)]),
    and([contents_Function1DPartialR8_Flags[q9] ->
         sum([contents_Function1DPartialR8_Values_ExplicitWithFlags_Flags[q9, q15] | q15 : int(1..let2)]) <= let2
             | q9 : int(1..let1)])

$ Conjure's
$ {"finds": [{"Name": "colour"}, {"Name": "contents"}],
$  "givens": [{"Name": "maxMaterial"}, {"Name": "quantity"}, {"Name": "capacity"}], "enumGivens": [],
$  "enumLettings":
$      [{"LettingDomainDefnEnum":
$            [{"Name": "Material"},
$             [{"Name": "glass"}, {"Name": "plastic"}, {"Name": "steel"}, {"Name": "wood"}, {"Name": "copper"}]]},
$       {"LettingDomainDefnEnum": [{"Name": "Colour"}, [{"Name": "red"}, {"Name": "green"}, {"Name": "blue"}]]}],
$  "lettings":
$      [[{"Name": "Material_EnumSize"}, {"Constant": {"ConstantInt": [{"TagInt": []}, 5]}}],
$       [{"Name": "Material"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagEnum": "Material"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 1]}},
$                          {"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 5]}}]}]]}}],
$       [{"Name": "Colour_EnumSize"}, {"Constant": {"ConstantInt": [{"TagInt": []}, 3]}}],
$       [{"Name": "Colour"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagEnum": "Colour"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 1]}},
$                          {"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 3]}}]}]]}}],
$       [{"MachineName": ["let", 1, []]},
$        {"Op":
$             {"MkOpSum":
$                  {"Comprehension":
$                       [{"Op":
$                             {"MkOpImage":
$                                  [{"Reference":
$                                        [{"Name": "quantity"},
$                                         {"DeclNoRepr":
$                                              ["Given", {"Name": "quantity"},
$                                               {"DomainFunction":
$                                                    [[],
$                                                     [{"SizeAttr_Size":
$                                                           {"Reference":
$                                                                [{"MachineName": ["fin", 1, []]},
$                                                                 {"DeclNoRepr":
$                                                                      ["Given", {"MachineName": ["fin", 1, []]},
$                                                                       {"DomainInt": [{"TagInt": []}, []]},
$                                                                       {"NoRegion": []}]}]}},
$                                                      "PartialityAttr_Total", "JectivityAttr_None"],
$                                                     {"DomainInt":
$                                                          [{"TagEnum": "Material"},
$                                                           [{"RangeBounded":
$                                                                 [{"Constant":
$                                                                       {"ConstantInt": [{"TagEnum": "Material"}, 1]}},
$                                                                  {"Constant":
$                                                                       {"ConstantInt":
$                                                                            [{"TagEnum": "Material"}, 5]}}]}]]},
$                                                     {"DomainInt":
$                                                          [{"TagInt": []},
$                                                           [{"RangeBounded":
$                                                                 [{"Constant": {"ConstantInt": [{"TagInt": []}, 0]}},
$                                                                  {"Reference":
$                                                                       [{"MachineName": ["fin", 2, []]},
$                                                                        {"DeclNoRepr":
$                                                                             ["Given", {"MachineName": ["fin", 2, []]},
$                                                                              {"DomainInt": [{"TagInt": []}, []]},
$                                                                              {"NoRegion": []}]}]}]}]]}]},
$                                               {"NoRegion": []}]}]},
$                                   {"Reference":
$                                        [{"Name": "m"},
$                                         {"DeclNoRepr":
$                                              ["Quantified", {"Name": "m"},
$                                               {"DomainInt":
$                                                    [{"TagEnum": "Material"},
$                                                     [{"RangeBounded":
$                                                           [{"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 1]}},
$                                                            {"Constant":
$                                                                 {"ConstantInt": [{"TagEnum": "Material"}, 5]}}]}]]},
$                                               {"NoRegion": []}]}]}]}},
$                        [{"Generator":
$                              {"GenDomainNoRepr":
$                                   [{"Single": {"Name": "m"}},
$                                    {"DomainInt":
$                                         [{"TagEnum": "Material"},
$                                          [{"RangeBounded":
$                                                [{"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 1]}},
$                                                 {"Constant":
$                                                      {"ConstantInt": [{"TagEnum": "Material"}, 5]}}]}]]}]}}]]}}}],
$       [{"Name": "Bin"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagUnnamed": "Bin"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                          {"Reference":
$                               [{"MachineName": ["let", 1, []]},
$                                {"Alias":
$                                     {"Op":
$                                          {"MkOpSum":
$                                               {"Comprehension":
$                                                    [{"Op":
$                                                          {"MkOpImage":
$                                                               [{"Reference":
$                                                                     [{"Name": "quantity"},
$                                                                      {"DeclNoRepr":
$                                                                           ["Given", {"Name": "quantity"},
$                                                                            {"DomainFunction":
$                                                                                 [[],
$                                                                                  [{"SizeAttr_Size":
$                                                                                        {"Reference":
$                                                                                             [{"MachineName":
$                                                                                                   ["fin", 1, []]},
$                                                                                              {"DeclNoRepr":
$                                                                                                   ["Given",
$                                                                                                    {"MachineName":
$                                                                                                         ["fin", 1, []]},
$                                                                                                    {"DomainInt":
$                                                                                                         [{"TagInt": []},
$                                                                                                          []]},
$                                                                                                    {"NoRegion":
$                                                                                                         []}]}]}},
$                                                                                   "PartialityAttr_Total",
$                                                                                   "JectivityAttr_None"],
$                                                                                  {"DomainInt":
$                                                                                       [{"TagEnum": "Material"},
$                                                                                        [{"RangeBounded":
$                                                                                              [{"Constant":
$                                                                                                    {"ConstantInt":
$                                                                                                         [{"TagEnum":
$                                                                                                               "Material"},
$                                                                                                          1]}},
$                                                                                               {"Constant":
$                                                                                                    {"ConstantInt":
$                                                                                                         [{"TagEnum":
$                                                                                                               "Material"},
$                                                                                                          5]}}]}]]},
$                                                                                  {"DomainInt":
$                                                                                       [{"TagInt": []},
$                                                                                        [{"RangeBounded":
$                                                                                              [{"Constant":
$                                                                                                    {"ConstantInt":
$                                                                                                         [{"TagInt": []},
$                                                                                                          0]}},
$                                                                                               {"Reference":
$                                                                                                    [{"MachineName":
$                                                                                                          ["fin", 2,
$                                                                                                           []]},
$                                                                                                     {"DeclNoRepr":
$                                                                                                          ["Given",
$                                                                                                           {"MachineName":
$                                                                                                                ["fin",
$                                                                                                                 2, []]},
$                                                                                                           {"DomainInt":
$                                                                                                                [{"TagInt":
$                                                                                                                      []},
$                                                                                                                 []]},
$                                                                                                           {"NoRegion":
$                                                                                                                []}]}]}]}]]}]},
$                                                                            {"NoRegion": []}]}]},
$                                                                {"Reference":
$                                                                     [{"Name": "m"},
$                                                                      {"DeclNoRepr":
$                                                                           ["Quantified", {"Name": "m"},
$                                                                            {"DomainInt":
$                                                                                 [{"TagEnum": "Material"},
$                                                                                  [{"RangeBounded":
$                                                                                        [{"Constant":
$                                                                                              {"ConstantInt":
$                                                                                                   [{"TagEnum":
$                                                                                                         "Material"},
$                                                                                                    1]}},
$                                                                                         {"Constant":
$                                                                                              {"ConstantInt":
$                                                                                                   [{"TagEnum":
$                                                                                                         "Material"},
$                                                                                                    5]}}]}]]},
$                                                                            {"NoRegion": []}]}]}]}},
$                                                     [{"Generator":
$                                                           {"GenDomainNoRepr":
$                                                                [{"Single": {"Name": "m"}},
$                                                                 {"DomainInt":
$                                                                      [{"TagEnum": "Material"},
$                                                                       [{"RangeBounded":
$                                                                             [{"Constant":
$                                                                                   {"ConstantInt":
$                                                                                        [{"TagEnum": "Material"}, 1]}},
$                                                                              {"Constant":
$                                                                                   {"ConstantInt":
$                                                                                        [{"TagEnum": "Material"},
$                                                                                         5]}}]}]]}]}}]]}}}}]}]}]]}}],
$       [{"MachineName": ["let", 2, []]},
$        {"Op":
$             {"MkOpMax":
$                  {"Op":
$                       {"MkOpRange":
$                            {"Reference":
$                                 [{"Name": "capacity"},
$                                  {"DeclNoRepr":
$                                       ["Given", {"Name": "capacity"},
$                                        {"DomainFunction":
$                                             [[],
$                                              [{"SizeAttr_Size":
$                                                    {"Reference":
$                                                         [{"MachineName": ["fin", 3, []]},
$                                                          {"DeclNoRepr":
$                                                               ["Given", {"MachineName": ["fin", 3, []]},
$                                                                {"DomainInt": [{"TagInt": []}, []]},
$                                                                {"NoRegion": []}]}]}},
$                                               "PartialityAttr_Total", "JectivityAttr_None"],
$                                              {"DomainInt":
$                                                   [{"TagEnum": "Colour"},
$                                                    [{"RangeBounded":
$                                                          [{"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 1]}},
$                                                           {"Constant":
$                                                                {"ConstantInt": [{"TagEnum": "Colour"}, 3]}}]}]]},
$                                              {"DomainInt":
$                                                   [{"TagInt": []},
$                                                    [{"RangeBounded":
$                                                          [{"Constant": {"ConstantInt": [{"TagInt": []}, 0]}},
$                                                           {"Reference":
$                                                                [{"MachineName": ["fin", 4, []]},
$                                                                 {"DeclNoRepr":
$                                                                      ["Given", {"MachineName": ["fin", 4, []]},
$                                                                       {"DomainInt": [{"TagInt": []}, []]},
$                                                                       {"NoRegion": []}]}]}]}]]}]},
$                                        {"NoRegion": []}]}]}}}}}]],
$  "unnameds": [[{"Name": "Bin"}, {"Reference": [{"MachineName": ["let", 1, []]}, null]}]],
$  "strategyQ": {"PickFirst": []}, "strategyA": {"Compact": []},
$  "trailCompact":
$      [[1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 3], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 2, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 2, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 3],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 2, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 2], [1, 1, 1], [1, 2, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]],
$  "nameGenState": [["conjure_aux", 3], ["fin", 5], ["let", 3], ["q", 186]], "nbExtraGivens": 4,
$  "representations":
$      [[{"Name": "colour"},
$        {"DomainFunction":
$             [{"Function_1DPartial": []}, [{"SizeAttr_None": []}, "PartialityAttr_Partial", "JectivityAttr_None"],
$              {"DomainInt":
$                   [{"TagUnnamed": "Bin"},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagUnnamed": "Bin"}, 1]}},
$                           {"Reference":
$                                [{"MachineName": ["let", 1, []]},
$                                 {"Alias":
$                                      {"Op":
$                                           {"MkOpSum":
$                                                {"Comprehension":
$                                                     [{"Op":
$                                                           {"MkOpImage":
$                                                                [{"Reference":
$                                                                      [{"Name": "quantity"},
$                                                                       {"DeclNoRepr":
$                                                                            ["Given", {"Name": "quantity"},
$                                                                             {"DomainFunction":
$                                                                                  [[],
$                                                                                   [{"SizeAttr_Size":
$                                                                                         {"Reference":
$                                                                                              [{"MachineName":
$                                                                                                    ["fin", 1, []]},
$                                                                                               {"DeclNoRepr":
$                                                                                                    ["Given",
$                                                                                                     {"MachineName":
$                                                                                                          ["fin", 1,
$                                                                                                           []]},
$                                                                                                     {"DomainInt":
$                                                                                                          [{"TagUnnamed":
$                                                                                                                "Bin"},
$                                                                                                           []]},
$                                                                                                     {"NoRegion":
$                                                                                                          []}]}]}},
$                                                                                    "PartialityAttr_Total",
$                                                                                    "JectivityAttr_None"],
$                                                                                   {"DomainInt":
$                                                                                        [{"TagUnnamed": "Bin"},
$                                                                                         [{"RangeBounded":
$                                                                                               [{"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagUnnamed":
$                                                                                                                "Bin"},
$                                                                                                           1]}},
$                                                                                                {"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagUnnamed":
$                                                                                                                "Bin"},
$                                                                                                           5]}}]}]]},
$                                                                                   {"DomainInt":
$                                                                                        [{"TagUnnamed": "Bin"},
$                                                                                         [{"RangeBounded":
$                                                                                               [{"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagUnnamed":
$                                                                                                                "Bin"},
$                                                                                                           0]}},
$                                                                                                {"Reference":
$                                                                                                     [{"MachineName":
$                                                                                                           ["fin", 2,
$                                                                                                            []]},
$                                                                                                      {"DeclNoRepr":
$                                                                                                           ["Given",
$                                                                                                            {"MachineName":
$                                                                                                                 ["fin",
$                                                                                                                  2,
$                                                                                                                  []]},
$                                                                                                            {"DomainInt":
$                                                                                                                 [{"TagUnnamed":
$                                                                                                                       "Bin"},
$                                                                                                                  []]},
$                                                                                                            {"NoRegion":
$                                                                                                                 []}]}]}]}]]}]},
$                                                                             {"NoRegion": []}]}]},
$                                                                 {"Reference":
$                                                                      [{"Name": "m"},
$                                                                       {"DeclNoRepr":
$                                                                            ["Quantified", {"Name": "m"},
$                                                                             {"DomainInt":
$                                                                                  [{"TagUnnamed": "Bin"},
$                                                                                   [{"RangeBounded":
$                                                                                         [{"Constant":
$                                                                                               {"ConstantInt":
$                                                                                                    [{"TagUnnamed":
$                                                                                                          "Bin"},
$                                                                                                     1]}},
$                                                                                          {"Constant":
$                                                                                               {"ConstantInt":
$                                                                                                    [{"TagUnnamed":
$                                                                                                          "Bin"},
$                                                                                                     5]}}]}]]},
$                                                                             {"NoRegion": []}]}]}]}},
$                                                      [{"Generator":
$                                                            {"GenDomainNoRepr":
$                                                                 [{"Single": {"Name": "m"}},
$                                                                  {"DomainInt":
$                                                                       [{"TagUnnamed": "Bin"},
$                                                                        [{"RangeBounded":
$                                                                              [{"Constant":
$                                                                                    {"ConstantInt":
$                                                                                         [{"TagUnnamed": "Bin"}, 1]}},
$                                                                               {"Constant":
$                                                                                    {"ConstantInt":
$                                                                                         [{"TagUnnamed": "Bin"},
$                                                                                          5]}}]}]]}]}}]]}}}}]}]}]]},
$              {"DomainInt":
$                   [{"TagEnum": "Colour"},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 1]}},
$                           {"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 3]}}]}]]}]}],
$       [{"Name": "capacity"},
$        {"DomainFunction":
$             [{"Function_1D": []},
$              [{"SizeAttr_Size":
$                    {"Reference":
$                         [{"MachineName": ["fin", 3, []]},
$                          {"DeclNoRepr":
$                               ["Given", {"MachineName": ["fin", 3, []]}, {"DomainInt": [{"TagInt": []}, []]},
$                                {"NoRegion": []}]}]}},
$               "PartialityAttr_Total", "JectivityAttr_None"],
$              {"DomainInt":
$                   [{"TagEnum": "Colour"},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 1]}},
$                           {"Constant": {"ConstantInt": [{"TagEnum": "Colour"}, 3]}}]}]]},
$              {"DomainInt":
$                   [{"TagInt": []},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagInt": []}, 0]}},
$                           {"Reference":
$                                [{"MachineName": ["fin", 4, []]},
$                                 {"DeclNoRepr":
$                                      ["Given", {"MachineName": ["fin", 4, []]}, {"DomainInt": [{"TagInt": []}, []]},
$                                       {"NoRegion": []}]}]}]}]]}]}],
$       [{"MachineName": ["fin", 1, []]}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"MachineName": ["fin", 2, []]}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"MachineName": ["fin", 3, []]}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"MachineName": ["fin", 4, []]}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"Name": "quantity"},
$        {"DomainFunction":
$             [{"Function_1D": []},
$              [{"SizeAttr_Size":
$                    {"Reference":
$                         [{"MachineName": ["fin", 1, []]},
$                          {"DeclHasRepr":
$                               ["Given", {"MachineName": ["fin", 1, []]}, {"DomainInt": [{"TagInt": []}, []]}]}]}},
$               "PartialityAttr_Total", "JectivityAttr_None"],
$              {"DomainInt":
$                   [{"TagEnum": "Material"},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 1]}},
$                           {"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 5]}}]}]]},
$              {"DomainInt":
$                   [{"TagInt": []},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagInt": []}, 0]}},
$                           {"Reference":
$                                [{"MachineName": ["fin", 2, []]},
$                                 {"DeclHasRepr":
$                                      ["Given", {"MachineName": ["fin", 2, []]},
$                                       {"DomainInt": [{"TagInt": []}, []]}]}]}]}]]}]}],
$       [{"Name": "maxMaterial"}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"Name": "contents"},
$        {"DomainFunction":
$             [{"Function_1DPartial": []}, [{"SizeAttr_None": []}, "PartialityAttr_Partial", "JectivityAttr_None"],
$              {"DomainInt":
$                   [{"TagUnnamed": "Bin"},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagUnnamed": "Bin"}, 1]}},
$                           {"Reference":
$                                [{"MachineName": ["let", 1, []]},
$                                 {"Alias":
$                                      {"Op":
$                                           {"MkOpSum":
$                                                {"Comprehension":
$                                                     [{"Op":
$                                                           {"MkOpImage":
$                                                                [{"Reference":
$                                                                      [{"Name": "quantity"},
$                                                                       {"DeclHasRepr":
$                                                                            ["Given", {"Name": "quantity"},
$                                                                             {"DomainFunction":
$                                                                                  [{"Function_1D": []},
$                                                                                   [{"SizeAttr_Size":
$                                                                                         {"Reference":
$                                                                                              [{"MachineName":
$                                                                                                    ["fin", 1, []]},
$                                                                                               {"DeclHasRepr":
$                                                                                                    ["Given",
$                                                                                                     {"MachineName":
$                                                                                                          ["fin", 1,
$                                                                                                           []]},
$                                                                                                     {"DomainInt":
$                                                                                                          [{"TagInt":
$                                                                                                                []},
$                                                                                                           []]}]}]}},
$                                                                                    "PartialityAttr_Total",
$                                                                                    "JectivityAttr_None"],
$                                                                                   {"DomainInt":
$                                                                                        [{"TagEnum": "Material"},
$                                                                                         [{"RangeBounded":
$                                                                                               [{"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagEnum":
$                                                                                                                "Material"},
$                                                                                                           1]}},
$                                                                                                {"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagEnum":
$                                                                                                                "Material"},
$                                                                                                           5]}}]}]]},
$                                                                                   {"DomainInt":
$                                                                                        [{"TagInt": []},
$                                                                                         [{"RangeBounded":
$                                                                                               [{"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagInt":
$                                                                                                                []},
$                                                                                                           0]}},
$                                                                                                {"Reference":
$                                                                                                     [{"MachineName":
$                                                                                                           ["fin", 2,
$                                                                                                            []]},
$                                                                                                      {"DeclHasRepr":
$                                                                                                           ["Given",
$                                                                                                            {"MachineName":
$                                                                                                                 ["fin",
$                                                                                                                  2,
$                                                                                                                  []]},
$                                                                                                            {"DomainInt":
$                                                                                                                 [{"TagInt":
$                                                                                                                       []},
$                                                                                                                  []]}]}]}]}]]}]}]}]},
$                                                                 {"Reference":
$                                                                      [{"Name": "m"},
$                                                                       {"DeclHasRepr":
$                                                                            ["Quantified", {"Name": "m"},
$                                                                             {"DomainInt":
$                                                                                  [{"TagEnum": "Material"},
$                                                                                   [{"RangeBounded":
$                                                                                         [{"Constant":
$                                                                                               {"ConstantInt":
$                                                                                                    [{"TagEnum":
$                                                                                                          "Material"},
$                                                                                                     1]}},
$                                                                                          {"Constant":
$                                                                                               {"ConstantInt":
$                                                                                                    [{"TagEnum":
$                                                                                                          "Material"},
$                                                                                                     5]}}]}]]}]}]}]}},
$                                                      [{"Generator":
$                                                            {"GenDomainHasRepr":
$                                                                 [{"Name": "m"},
$                                                                  {"DomainInt":
$                                                                       [{"TagEnum": "Material"},
$                                                                        [{"RangeBounded":
$                                                                              [{"Constant":
$                                                                                    {"ConstantInt":
$                                                                                         [{"TagEnum": "Material"}, 1]}},
$                                                                               {"Constant":
$                                                                                    {"ConstantInt":
$                                                                                         [{"TagEnum": "Material"},
$                                                                                          5]}}]}]]}]}}]]}}}}]}]}]]},
$              {"DomainMSet":
$                   [{"MSet_ExplicitWithFlags": []},
$                    [{"SizeAttr_MaxSize":
$                          {"Reference":
$                               [{"MachineName": ["let", 2, []]},
$                                {"Alias":
$                                     {"Op":
$                                          {"MkOpMax":
$                                               {"Comprehension":
$                                                    [{"Op":
$                                                          {"MkOpIndexing":
$                                                               [{"Reference":
$                                                                     [{"MachineName": ["q", 6, []]},
$                                                                      {"InComprehension":
$                                                                           {"GenInExpr":
$                                                                                [{"Single":
$                                                                                      {"MachineName": ["q", 6, []]}},
$                                                                                 {"Reference":
$                                                                                      [{"Name": "capacity"},
$                                                                                       {"DeclHasRepr":
$                                                                                            ["Given",
$                                                                                             {"Name": "capacity"},
$                                                                                             {"DomainFunction":
$                                                                                                  [{"Function_1D": []},
$                                                                                                   [{"SizeAttr_Size":
$                                                                                                         {"Reference":
$                                                                                                              [{"MachineName":
$                                                                                                                    ["fin",
$                                                                                                                     3,
$                                                                                                                     []]},
$                                                                                                               {"DeclHasRepr":
$                                                                                                                    ["Given",
$                                                                                                                     {"MachineName":
$                                                                                                                          ["fin",
$                                                                                                                           3,
$                                                                                                                           []]},
$                                                                                                                     {"DomainInt":
$                                                                                                                          [{"TagInt":
$                                                                                                                                []},
$                                                                                                                           []]}]}]}},
$                                                                                                    "PartialityAttr_Total",
$                                                                                                    "JectivityAttr_None"],
$                                                                                                   {"DomainInt":
$                                                                                                        [{"TagEnum":
$                                                                                                              "Colour"},
$                                                                                                         [{"RangeBounded":
$                                                                                                               [{"Constant":
$                                                                                                                     {"ConstantInt":
$                                                                                                                          [{"TagEnum":
$                                                                                                                                "Colour"},
$                                                                                                                           1]}},
$                                                                                                                {"Constant":
$                                                                                                                     {"ConstantInt":
$                                                                                                                          [{"TagEnum":
$                                                                                                                                "Colour"},
$                                                                                                                           3]}}]}]]},
$                                                                                                   {"DomainInt":
$                                                                                                        [{"TagInt": []},
$                                                                                                         [{"RangeBounded":
$                                                                                                               [{"Constant":
$                                                                                                                     {"ConstantInt":
$                                                                                                                          [{"TagInt":
$                                                                                                                                []},
$                                                                                                                           0]}},
$                                                                                                                {"Reference":
$                                                                                                                     [{"MachineName":
$                                                                                                                           ["fin",
$                                                                                                                            4,
$                                                                                                                            []]},
$                                                                                                                      {"DeclHasRepr":
$                                                                                                                           ["Given",
$                                                                                                                            {"MachineName":
$                                                                                                                                 ["fin",
$                                                                                                                                  4,
$                                                                                                                                  []]},
$                                                                                                                            {"DomainInt":
$                                                                                                                                 [{"TagInt":
$                                                                                                                                       []},
$                                                                                                                                  []]}]}]}]}]]}]}]}]}]}}]},
$                                                                {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}]}},
$                                                     [{"Generator":
$                                                           {"GenInExpr":
$                                                                [{"Single": {"MachineName": ["q", 6, []]}},
$                                                                 {"Reference":
$                                                                      [{"Name": "capacity"},
$                                                                       {"DeclHasRepr":
$                                                                            ["Given", {"Name": "capacity"},
$                                                                             {"DomainFunction":
$                                                                                  [{"Function_1D": []},
$                                                                                   [{"SizeAttr_Size":
$                                                                                         {"Reference":
$                                                                                              [{"MachineName":
$                                                                                                    ["fin", 3, []]},
$                                                                                               {"DeclHasRepr":
$                                                                                                    ["Given",
$                                                                                                     {"MachineName":
$                                                                                                          ["fin", 3,
$                                                                                                           []]},
$                                                                                                     {"DomainInt":
$                                                                                                          [{"TagInt":
$                                                                                                                []},
$                                                                                                           []]}]}]}},
$                                                                                    "PartialityAttr_Total",
$                                                                                    "JectivityAttr_None"],
$                                                                                   {"DomainInt":
$                                                                                        [{"TagEnum": "Colour"},
$                                                                                         [{"RangeBounded":
$                                                                                               [{"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagEnum":
$                                                                                                                "Colour"},
$                                                                                                           1]}},
$                                                                                                {"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagEnum":
$                                                                                                                "Colour"},
$                                                                                                           3]}}]}]]},
$                                                                                   {"DomainInt":
$                                                                                        [{"TagInt": []},
$                                                                                         [{"RangeBounded":
$                                                                                               [{"Constant":
$                                                                                                     {"ConstantInt":
$                                                                                                          [{"TagInt":
$                                                                                                                []},
$                                                                                                           0]}},
$                                                                                                {"Reference":
$                                                                                                     [{"MachineName":
$                                                                                                           ["fin", 4,
$                                                                                                            []]},
$                                                                                                      {"DeclHasRepr":
$                                                                                                           ["Given",
$                                                                                                            {"MachineName":
$                                                                                                                 ["fin",
$                                                                                                                  4,
$                                                                                                                  []]},
$                                                                                                            {"DomainInt":
$                                                                                                                 [{"TagInt":
$                                                                                                                       []},
$                                                                                                                  []]}]}]}]}]]}]}]}]}]}}]]}}}}]}},
$                     {"OccurAttr_MaxOccur":
$                          {"Reference":
$                               [{"Name": "maxMaterial"},
$                                {"DeclHasRepr":
$                                     ["Given", {"Name": "maxMaterial"}, {"DomainInt": [{"TagInt": []}, []]}]}]}}],
$                    {"DomainInt":
$                         [{"TagEnum": "Material"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 1]}},
$                                 {"Constant": {"ConstantInt": [{"TagEnum": "Material"}, 5]}}]}]]}]}]}]],
$  "representationsTree":
$      [[{"Name": "capacity"},
$        [{"rootLabel": {"Function_1D": []},
$          "subForest": [{"rootLabel": null, "subForest": []}, {"rootLabel": null, "subForest": []}]}]],
$       [{"Name": "colour"},
$        [{"rootLabel": {"Function_1DPartial": []},
$          "subForest": [{"rootLabel": null, "subForest": []}, {"rootLabel": null, "subForest": []}]}]],
$       [{"Name": "contents"},
$        [{"rootLabel": {"Function_1DPartial": []},
$          "subForest":
$              [{"rootLabel": null, "subForest": []},
$               {"rootLabel": {"MSet_ExplicitWithFlags": []}, "subForest": [{"rootLabel": null, "subForest": []}]}]}]],
$       [{"MachineName": ["fin", 1, []]}, [{"rootLabel": null, "subForest": []}]],
$       [{"MachineName": ["fin", 2, []]}, [{"rootLabel": null, "subForest": []}]],
$       [{"MachineName": ["fin", 3, []]}, [{"rootLabel": null, "subForest": []}]],
$       [{"MachineName": ["fin", 4, []]}, [{"rootLabel": null, "subForest": []}]],
$       [{"Name": "maxMaterial"}, [{"rootLabel": null, "subForest": []}]],
$       [{"Name": "quantity"},
$        [{"rootLabel": {"Function_1D": []},
$          "subForest": [{"rootLabel": null, "subForest": []}, {"rootLabel": null, "subForest": []}]}]]],
$  "originalDomains":
$      [[{"Name": "maxMaterial"}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"Name": "quantity"},
$        {"DomainFunction":
$             [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$              {"DomainEnum": [{"Name": "Material"}, null, null]},
$              {"DomainInt":
$                   [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 0]}}}]]}]}],
$       [{"Name": "capacity"},
$        {"DomainFunction":
$             [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$              {"DomainEnum": [{"Name": "Colour"}, null, null]},
$              {"DomainInt":
$                   [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 0]}}}]]}]}],
$       [{"Name": "colour"},
$        {"DomainFunction":
$             [[], [{"SizeAttr_None": []}, "PartialityAttr_Partial", "JectivityAttr_None"],
$              {"DomainReference": [{"Name": "Bin"}, null]}, {"DomainEnum": [{"Name": "Colour"}, null, null]}]}],
$       [{"Name": "contents"},
$        {"DomainFunction":
$             [[], [{"SizeAttr_None": []}, "PartialityAttr_Partial", "JectivityAttr_None"],
$              {"DomainReference": [{"Name": "Bin"}, null]},
$              {"DomainMSet":
$                   [[],
$                    [{"SizeAttr_MaxSize": {"Reference": [{"MachineName": ["let", 2, []]}, null]}},
$                     {"OccurAttr_MaxOccur": {"Reference": [{"Name": "maxMaterial"}, null]}}],
$                    {"DomainEnum": [{"Name": "Material"}, null, null]}]}]}]],
$  "trailGeneralised":
$      [[-3051761468089363672, -7242455598209885694], [7672416887373875564, -8438055240862190397],
$       [4509222486702645796, 3434565458880236538], [7623762119006482658, 4290286531154952700],
$       [8540580172713564494, -7259215713488351252], [1907207333359889418, -2433660382763980715],
$       [-4076294397184717216, -5879043694526478183], [4173808394271127220, 639665044650784215],
$       [-8829015187828685668, 3120038769829461399], [-3924895060848670898, -7148945409565111943],
$       [4519414310140647771, -7148945409565111943], [-9046178040296332182, -7148945409565111943],
$       [6902486587982008010, -7148945409565111943], [-4260605085953427940, -7148945409565111943],
$       [-9137950479973378488, -7148945409565111943], [-4802985544877463662, -5650613377438529436],
$       [-4308102779335095722, -4133456388446394242], [2296249483198291518, -716576958502534693],
$       [745935140224713629, 401073493881559965], [-3368054482727271398, -7252505777523942843],
$       [6986822483674369284, 5940187184171825143], [3939116952739959796, 2933215554791977714],
$       [-2273755252338423838, 4719325542910332975], [66802762740178514, 2453262293683178367],
$       [-7240234812908478800, 5475166625321055453], [-3844334886412128038, 8450033777663015512],
$       [1672398992133721306, -5095244820911906773], [-1453827620584084174, 1538616738151520905],
$       [3531371907400040974, -8173195161035941069], [-977796407916438600, 2160115922184831479],
$       [-2355859021453097400, -8239948157571280203], [720259575066131005, -8173195161035941069],
$       [7068589685535462278, 3803419905101401105], [2090141624031547104, -5930801818699419191],
$       [2626577218004626674, -5930801818699419191], [5059529503411230786, -5930801818699419191],
$       [-7264690557171360611, -5930801818699419191], [-733343303735361481, -5930801818699419191],
$       [-6568994300398589857, -5930801818699419191], [1763787352917629924, -4499914026135637394],
$       [1445924617424064888, -4919891822223886156], [8687010602487388100, -2329218649956939253],
$       [-4282675297720483850, 8742713591940703725], [8581321371332863901, -5618453411567931847],
$       [5886669743951431679, 2917528488074892775], [-7657767032916143037, -2873931613881763300],
$       [-5874725116001883512, 632383306368613997], [-7342153353529358068, 2161426401913967237],
$       [1077571919118359930, -8131885500151951273], [40659657765048211, 3224304574880845146],
$       [-1067578262208093565, 2160115922184831479], [-7573745561736228613, -8239948157571280203],
$       [5168783508842937823, -8173195161035941069], [984195306639643121, 565936542596822135],
$       [-1496033133873676439, 8783332373951000693], [7267345826057412880, -8173195161035941069],
$       [-8904240673589066372, -92098523499464949], [-2849473637894268870, -1093770620633559367],
$       [164532103682052873, -1093770620633559367], [-2284491518312131802, -1093770620633559367],
$       [7179149056519654442, -1093770620633559367], [7922706074346733495, -1093770620633559367],
$       [5539467824060771010, -1093770620633559367], [4201125649056521226, 6235218271280297600],
$       [-1504563661127653726, -5661777190001850466], [1513874910078905806, 4763361215010438819],
$       [2665860862302549187, -3713772011671735137], [1626368483904284336, -1261691430946343613],
$       [-1713595771651475038, 1663233521040094153], [-3503611569046530313, -8280246636152737106],
$       [-3346365938177737876, 2240286659795769535], [-7618422755834354929, 9056479174866187807],
$       [5130180193068584861, 5105706450646116549], [4850542743930834308, 298425777703787980],
$       [1723397455029446461, -5095244820911906773], [5495330541809351301, 1538616738151520905],
$       [1036633180481324088, -8173195161035941069], [-709795147972455975, -7520501878989365953],
$       [-1264981075511469839, 2413364081327091613], [1358683136951323164, -8173195161035941069],
$       [1414158408512064070, 7593703154294095727], [3905628201266397312, -7397584186059055495],
$       [-2654820444613497986, -7397584186059055495], [-7179247420753213828, -7397584186059055495],
$       [1178337220351294522, -7397584186059055495], [-8419198209724018723, -7397584186059055495],
$       [-5974778694227712432, 6922350183210512092], [2419437904580770802, 5076465526065793195],
$       [7747542999652190770, -6973566246486087539], [-7779193516001330980, -6612368877771701187],
$       [2135960585610215620, -1723492501775289025], [1970902829716790401, 1650136714459090802],
$       [2521277088680304326, -889311674386150443], [-8827466162372764188, -4007057766348832593],
$       [9129781676233000707, -5358108894858870187], [5756467086754470871, -8173195161035941069],
$       [-6441376832781171901, 55181819940349391], [4334105307212206299, 2426434722973945989],
$       [-2499466780679114424, -5370676388064940169], [6479342062383578538, 5125762467956375939],
$       [110947859166207975, 2630953727365550943], [-6303648311852677923, 2630953727365550943],
$       [6868787130946000153, 2630953727365550943], [1804257078934865427, 2630953727365550943],
$       [-4919507888635587625, 2630953727365550943], [8776444937425793772, -6412393155330615752],
$       [6262123883213762638, -8232500473234797463], [8523162111950173522, -6507562050846800596],
$       [7437373517811090129, 1766488274628564973], [3784184256072921553, 4957439428539117383],
$       [-6840334868885222437, -271483073297628360], [-5273567498161294640, 125717371953529303],
$       [-1962557816734748133, -8702492297789099990], [737109301312872908, -5358108894858870187],
$       [-4934871875456844220, -8173195161035941069], [-4028744643325549140, 1080651130803109327],
$       [734856460126575916, -8989257877305071823], [3169286576806577759, -5370676388064940169],
$       [4214830480980349728, -2516729154295380337], [-8100122637010277215, 7393011559850103369],
$       [-5412556437049569009, 7393011559850103369], [-1493575762943839889, 7393011559850103369],
$       [4709658338804468949, 7393011559850103369], [3220013688631576541, 7393011559850103369],
$       [4238039249833721811, 7393011559850103369], [2511504048366217508, 7393011559850103369],
$       [-309985576643687329, 7393011559850103369], [-7588609272614429922, -8908416117426665012],
$       [259670439725084934, 3577055163363470262], [-8185470958552021450, -6668642788896450213],
$       [-6878281427192145062, -7107371098966344099], [9210028176179885982, 2312596522891316621],
$       [-4615342251026946708, 3405702692162921631], [8245139202772373321, -8088184430941475430],
$       [-77169532945344553, 565936542596822135], [4789899623234794663, 8783332373951000693],
$       [6776856337526403427, -8173195161035941069], [4222524976524866155, 222786694690297317],
$       [-2119318562223179931, 1118687399975944325], [-2095571942967650545, 8461120551727637355],
$       [8285001287868517888, -901591682770596236], [7533670054276204460, 495695300981929163],
$       [-2184262268870983132, 4826290519543448265], [-2366165428014598204, -8173195161035941069],
$       [-8170690567442621228, 55181819940349391], [5398262284759785012, 2426434722973945989],
$       [1264684705219337639, -5370676388064940169], [-6230244381942067062, -3908125279438054679],
$       [-6159718716734274947, 886535472814316489], [-808207408566893644, 886535472814316489],
$       [798513784972001289, 886535472814316489], [-8015059258281556307, 886535472814316489],
$       [3784372442230562182, 886535472814316489], [6442817923085867533, 886535472814316489],
$       [-7461296137203061619, 886535472814316489], [-6566372296905228625, 886535472814316489],
$       [5024141918671674208, -7267493831737896074], [4682130291280976040, 4008948888925180896],
$       [-5497214434044408332, -2852250859947579681], [428492394879765036, 6044392609115996607],
$       [-8818170546855573968, 2995142985614462975], [-2279216935475690414, 1040481047741447333],
$       [-2180962268192159642, -8750828579111184260], [-1726359301981022700, -5095244820911906773],
$       [2144151772342341732, 1538616738151520905], [-96287396949900, -8173195161035941069],
$       [-6343295063294789283, 653977898374880863], [8406799950323590011, -9064922373690514493],
$       [4862006457103092649, 7200753831003052529], [-4555370925340780005, -2553686147718547006],
$       [6351063711568615391, -7520501878989365953], [6565624659554793967, 2413364081327091613],
$       [-8239322706546383653, -8173195161035941069], [7550442256046827602, -3107020035610434721],
$       [8636385740158458706, -7383514788535708775], [-5957584966953866639, -5370676388064940169],
$       [5658616712198947076, 7519382916771761423], [-184129880408342729, -5452997824722662487],
$       [-7077874546981631881, -5452997824722662487], [523428574569961089, -5452997824722662487],
$       [-9107941885700585444, -5452997824722662487], [-2050458235629508403, -5452997824722662487],
$       [2545219697590686472, -5452997824722662487], [6949972209942854772, -5452997824722662487],
$       [2556714306022017872, -5452997824722662487], [292291620732652698, -4831500967472509868],
$       [8934143395012338342, -8616105933020550658], [-8897106849621561194, 3734917088816813911],
$       [8250007232763811392, 1178476451911324869], [5348553222908044756, 5863789589893847785],
$       [-4664301173107820754, 1976908033260820011], [4408785255684217719, 3549369657852525970],
$       [8858165900217799081, 495695300981929163], [9082872815231646817, 4826290519543448265],
$       [-6319502329396353007, -8173195161035941069], [1900101590627632256, -6977201904762253745],
$       [4049326931526843694, -1395324564560550065], [-998220337920312164, -3096106387138589643],
$       [-47251602034496876, 6067843326715926036], [4820529861214471640, -5095244820911906773],
$       [-2146452648189643512, 1538616738151520905], [8567551455967885376, -8173195161035941069],
$       [3252061759375814543, 1080651130803109327], [2580307789079798199, -8989257877305071823],
$       [5444986494473715236, -5370676388064940169], [-2988463736653985114, -9078743367892589553],
$       [-6667012654243924058, 2301114894141098873], [540361197809311794, 2301114894141098873],
$       [-6557459348271212012, 2301114894141098873], [-859081785650552192, 2301114894141098873],
$       [7558974806569516906, 2301114894141098873], [6532173829050366884, 8415607524131088952],
$       [9214266663383046646, -7265981581346909641], [-5003080616685267226, -5344051735759836379],
$       [-4480934006688862929, -644230317047034486], [-1133226327458212108, 8706210004898051539],
$       [-7169318080846964530, -8539411253811386970], [-9096071822475596853, 4182586684016054432],
$       [-5639270602266659153, 202467544968545705], [-1739433794403766465, -7721007481347333600],
$       [-7372075295994517006, -9026459811107012082], [4202777480775290248, 7664603622192990137],
$       [865272777167732671, -5370676388064940169], [1935486984033571682, 5021530680135488934],
$       [-3686762073897677118, 6372570409547306145], [3682274077613793807, -8173195161035941069],
$       [-4857709198741876313, 1351297134461599911], [8977767052746319421, -7378894129286733987],
$       [-4987277013820592093, -5983483547631704540], [1894799111085757929, -6978034386771967259],
$       [9207880201299742369, -6329001001428530996], [-228630510060888373, 3180540458082898552],
$       [3484246411964538784, 544889187595928205], [6636224813359721930, 672077000496122235],
$       [-3414483076534492413, 2124276268976907661], [-9180937207352490574, -5787227536742825232],
$       [1201967591247302468, -919909535400600513], [1305416777675725031, 2336164729134932485],
$       [559830845878099332, -3171339443097180992], [6570554526614750514, -8616920358705140155],
$       [3655815838032422752, 8402081893971873511], [8004431700190609840, -4900304980196405748],
$       [-4625733933373622926, -5908255931101830843], [6483542527830398191, -7027405466195022036],
$       [2145018742855742960, -865194462947176773], [6877439124277501874, 2302733051948218289],
$       [-4855259726346836105, -8999689903589724762], [-7733907771772901869, -8567184504554716064],
$       [1141765085890369230, 6602701778185815257], [5129532111829086419, -1605808014015112392],
$       [-1926241669703897332, 7089581722466370415], [4355030569166245336, 3326078136672870085],
$       [2427481203053936552, 7965694343652105893], [5746087508531221800, -857002840387674012],
$       [-221801796575558332, -5854097013550391323], [-5078099541252562869, 4740271711388570391],
$       [-1469890289354061808, 2588774037540826911], [-280359815755479504, -2813074001720889297],
$       [-6223509597672234536, 5211707451326485975], [-7781360177417836840, 4757126866633940719],
$       [-7844279266898094458, -348647451188541963], [-6773873290789152778, 2376479545432848917],
$       [-8730148893475272792, 211767582563460495], [-5036706532640953464, -8679408091764883305],
$       [371774051005857040, 5278989313831379151], [-1454023945743384308, 4774556655625171859],
$       [-2153109142422059542, 4232235970490313787], [-5185172810581455054, -5409978531151131808],
$       [934179988200794108, -567207732430512198], [-1167444820511680960, 8970860594039094332],
$       [-2984010033637877438, 2423772555088949590], [8258743695424031178, 4197234357754447969],
$       [-5720558350679712207, -946735349187298356], [-3356669615559820005, 8162499990214987886],
$       [5596218109477331115, 5084240479235986312], [6353076548669541193, 7184956665687478666],
$       [5821752573929283051, -3379755073259076447], [-5897162573307607226, 1981712239124419862],
$       [-1791323141479689758, -7200532340734665236], [8630969777426529840, -2465677506527597162],
$       [-8574062852708318176, -1719108161330100040], [2337270558798738904, 8587480547203907766],
$       [4497225682807208140, -3121727252085874180], [-472085065541165230, 4223066308621478474],
$       [-3602026117309413936, 6700275434992814417], [-6631633216620138767, -3993350319364176826],
$       [4111590927267549745, -2917951420412051592], [9128054616710704083, -2642830236981603554],
$       [4058684187269218089, -2367713886346477930], [4586731968654666996, -122193187958321743],
$       [9212075571328499400, -122193187958321743], [-5236111791580693354, 3957415437915444147],
$       [-9071084700956071200, 2764038055724866751], [-4674202961182641604, 584555271296802086],
$       [1735586744007481261, -62953812267061723], [4353304805236159648, 2838208820106068527],
$       [2500638167794533132, 8938433150501894802], [4186887151479739074, 4855698824228525331],
$       [5426888193580560108, 4154464346906580659], [4704393833383712825, -75073774543713521],
$       [7337425548130454044, -3000088714988951637], [-8073384002171350677, 6512496901109328157],
$       [8044344883340776014, 8204772086264004703], [-3972784756192475903, 8204772086264004703],
$       [6296676089299181145, 8204772086264004703], [-2321691673039408031, 6894934105819467101],
$       [727374704239538753, -4883791928793981843], [2775110138740986056, 6512496901109328157],
$       [3171638396151380643, -6654343398919812362], [3600092828828679604, 8204772086264004703],
$       [7451463136930923915, 8204772086264004703], [6716982519382526475, 8204772086264004703],
$       [2922143569310209683, 791293243655154457], [6615968665042173821, 8204772086264004703],
$       [-237685030727282242, 8204772086264004703], [-2134277054318691302, 8204772086264004703],
$       [3421061114230043940, 791293243655154457], [-6578845494319650890, 7215058006745194901],
$       [-5768253902752144097, 6995924474856207444], [-469883829369288852, -2773586573075721100],
$       [1952005412935106351, 2195466114097571276], [-2918103143964413931, -4375523643716627485],
$       [1990649281890704090, 2669574376273514737], [-3554846300832799526, 2296252756025703698],
$       [-6611079728100439081, -7205679827897642251], [1766340965900062733, -4394556229971078954],
$       [2553039278916729886, -5669773002549083044], [-402856194545938052, -7504066313380452789],
$       [4130309669425513558, -3286387296252785873], [3853863303920904481, 237466423358905775],
$       [8489519476591617534, -3386215650098063393], [3872136434198065931, -3386215650098063393],
$       [5556054586697722275, -3386215650098063393], [1289543733153862582, -7884853949188843179],
$       [-960841112305138193, -3386215650098063393], [-1268473094593084146, -3386215650098063393],
$       [-3914514643753039672, -3386215650098063393], [-3576341848781667641, -5217591850871841816],
$       [-5086379833349575127, -2187838983959389907], [8070485641752858935, -4167701159106167739],
$       [-4961415843933174605, 7951101842648436451], [-4379638273099798755, -4428043603543012758],
$       [5044722899024430488, 4967427254842715740], [-5517599533095206560, 9123343453344147595],
$       [-2097181641018124715, 2079015200299184301], [-7379814676691322475, -3778984934861388048],
$       [3724927799954416545, 236557471283326490], [-8534476979106428173, 6207715406796694100],
$       [-2207333879678093474, 8539913495584578466], [-2892798415299548347, -1815520635581632007],
$       [-5035335641617595868, 7417965073517485511], [-6676825361020149730, -4335795867106909737],
$       [-2375044224705076070, 6746854738377381010], [-7391767826328017278, -6545649645249935527],
$       [-1359119229046290089, -6757015519700046956], [9017791610874960952, 2350862431443905441],
$       [2395234013218590569, 8094482645085210028], [-2124716851852748882, 267763165979410589],
$       [3929997169085696180, 3078675731660953733], [-460890319172808364, 6377622543103629203],
$       [8632599635257642714, 6377622543103629203], [3435197693571799098, 6377622543103629203],
$       [7682696328661960751, 3268675849082993413], [-5840263924272407103, 578495991731795464],
$       [412482555404273697, 6855923808958092329], [7972742520609455650, -2007256763098592997],
$       [-6011090801407859238, -8724746341514223966], [-2132073129810376692, -2450896106991971058],
$       [8723657067415689862, 5043768100456470941], [3284175945194476349, -2007256763098592997],
$       [-9081686585771084498, 6377622543103629203], [-6608676909246537980, 6377622543103629203],
$       [7894230205926474058, 6377622543103629203], [-1341040093434288978, 6377622543103629203],
$       [-5466642675518760190, 6377622543103629203], [-5480633681934004434, 6377622543103629203],
$       [4291540438724148124, 6522304631826125486], [6245699731787248504, 2969227930376077354],
$       [-5786162210202176189, -2771493319702777270], [3501819296471824220, -2007256763098592997],
$       [2403008697936136616, 6377622543103629203], [1060744110653202450, 6377622543103629203],
$       [8700170672094375108, 6377622543103629203], [8629868625256495947, 6377622543103629203],
$       [2587681222034042303, 6377622543103629203], [6217474042261134399, 6377622543103629203],
$       [8528690613969037861, 6377622543103629203], [6615587063734645915, 6377622543103629203],
$       [4282867629647160189, 6377622543103629203], [7389188248360191073, 6377622543103629203],
$       [7462891453144261951, 6377622543103629203], [-8545832204665394751, 6377622543103629203],
$       [2067190413553044300, 6377622543103629203], [6040331342020910752, 6377622543103629203],
$       [-5506895623302003846, 6377622543103629203], [-7698286430715923680, 1984491274519628234],
$       [5748679661157928897, 2972645374006857044], [5429195381212341834, -1188163084406893687],
$       [-8591534861015676286, 1391027483288574624], [-4393353869842683480, 3925584603888296482],
$       [-1289002508341394938, -6432554033270744131], [-9189681371895379258, -5103948208475940733],
$       [-4012339195819223535, 4720459695752149211], [8473219245457519552, -4721881853732016850],
$       [-1603498272791556206, 6380843476429602887], [63984543770219387, -8024619496972831516],
$       [7401332577169153547, 1346813905644127088], [-258429644053086343, -3965302711685795236],
$       [1701427660296041145, 4248979036335595320], [-7736002171464661971, 1877917973777185019],
$       [-521093728708626406, -6730124612451010109], [-7758303724233013134, -2973557919492953045],
$       [-107694207186890538, 4411542857982702914], [436299663687864492, 1743054222836930552],
$       [-7724186250029075139, 1284525925760613906], [-2568002925676108039, -427970593545322135],
$       [631042950016204988, 9093443583029963857], [9061928761565997519, 5269731942262087242],
$       [5401241313276748182, 4429686456746362078], [-7073681855797384623, 4243077491592718030],
$       [-3313393552949755493, -643514059062301171], [-1068880282203937730, 6465771344391753194],
$       [-9040079706172958987, 5564505140495436143], [3994535662825073786, 577783154022163763],
$       [-533391026826390560, 5244136385778174424], [1778594642463112303, 7517202732945821897],
$       [-6510327254564442196, 4225591231284594309], [-6920514931617873661, -5615279551337516980],
$       [-4744828533315781031, 1805554062420814185], [-2563839622757927580, 1633861550032553970],
$       [6338817567552830821, -4936925516762862717], [-4183273728724391833, 8699753045551532857],
$       [-3196777924437208206, 4372954955942254502], [8149889539048547304, 4973051682941666664],
$       [520882363701649033, 7467506413698627105], [-3378126313519870810, 5740416233472335532],
$       [3565015884363228420, -7728171979356694697], [-8819546523637275116, 224964979627997277],
$       [4422328888351862617, -9154729290603406597], [7342559531811018850, -8385418459655693275],
$       [8357874456156765938, -7223223320042410378], [-6843563164349286558, -6761692578209217244],
$       [1161883835462369716, -5782196213586968797], [419807730153731938, 8659895264139786441],
$       [-363334366200538078, 2948824530736779601], [-4883911486428678950, -6151361041949351826],
$       [6501417782551960957, -6236542048823347330], [215876683695949403, -3645905546798679785],
$       [6590797457732128914, -5869758498335839567], [1489152670702009316, -4084608397475468954],
$       [-2945695543809119012, -7241005413422330785], [-1413569489610097194, -2482954542058463537],
$       [-4864243885220282889, 8352348477521314189], [7332252099556412751, 6957794774098241775],
$       [-4308837118656711308, 8277835241114140347], [-708395702486825246, -4479186944361589894],
$       [5679514643743593785, -8859396284737388750], [7034529869715868891, 2092631073909853999],
$       [-671295522873280527, -2084573361464179716], [-6709488197133862793, -289248043883731212],
$       [-997298308790069947, -2485698491275486150], [1645756323349181759, 709844805850902804],
$       [2908720213455907174, 3535784530238451221], [-2066227162087619303, -2846617588879787377],
$       [6033298768517707197, -652949121914769596], [-1344919553141933916, 6323194227824239172],
$       [2270267295129948891, 3214870010545034067], [6299336068595296568, -88874731011665950],
$       [-8924793558502457750, 3257066499494518486], [6566625036304712688, -2604749270994208895],
$       [48430972471749451, 3214870010545034067], [7131146393764176073, 157370623084816903],
$       [-3258793686328003530, 157370623084816903], [-3258445009533932216, 157370623084816903],
$       [7110007688496938941, 157370623084816903], [-1440959126236628910, 157370623084816903],
$       [-3427844792617482978, 157370623084816903], [-8399640253447836551, -2524366734816965722],
$       [-8884882996485143201, 7804050739174596558], [-3700044103948621479, 2024062464837061482],
$       [-2656588637823172718, 3214870010545034067], [-3982494175016629924, 157370623084816903],
$       [4935738852967722651, 157370623084816903], [-877094354498836335, 157370623084816903],
$       [4223452482808464451, 5593518989928087080], [3846298796082229057, 2517003327662040657],
$       [-2854392531147684882, -7987761326966201900], [7080100903566648424, 7727428231807719342],
$       [3409685936524189840, -6262690904692166899], [-1876041133249334436, -2857618128489423479],
$       [5182460534671202439, 840793988784110700], [6590207009083135056, 5767993561982792260],
$       [6041624133981036462, 5030687659497449966], [-6670125657442819514, 3479274320208329645],
$       [-9196057010288643734, -1730671640922951739], [-316760131451180481, -7277415148004177490],
$       [-8946115252413620101, -9158944337753581707], [3653951875766372684, 6517694455399401282],
$       [5916820967994229186, -5634504096338802588], [7506503385353554490, -4084486555745526681],
$       [6527087619866956373, 1666730952459501345], [-6937867543172331429, 4840467811493899946],
$       [-7550840342694943449, -2696046394775594639], [-7525738010162032949, 8592532504029370060],
$       [-1731967102283905412, -8524244267826416002], [898675765139560617, 8301411872806738431],
$       [5563007172915429832, -2759159458188792278], [7868721378803645069, 4555014816408249991],
$       [7103095622337348887, -3850406867493955641], [-6661406754749101791, -3850406867493955641],
$       [-264585191403038083, -3850406867493955641], [-2895879491687221261, 5785473722162108357],
$       [8340528405513571465, -3850406867493955641], [9097488718678226993, -3850406867493955641],
$       [-2243749449322834809, -3850406867493955641], [-2583906730405044109, 4821009706714591240],
$       [4783701321444603480, -1155570536935949282], [-5716861943521238128, 3097522681770151579],
$       [2432718742530997381, 3414056643823397201], [-7896375393928699330, 8225371634353512516],
$       [8756018104316365520, -4062083142980062106], [-2576240687891333104, 8092595089837829158],
$       [9000269984435737395, 2559375809852859067], [-6205704293236600391, -2341325663307383031],
$       [-1571842587948377012, -3605126363440656460], [-8676424912708641919, 7926228164347816280],
$       [6731107709874150368, -5693832888165951076], [7142086045820007261, -8336992077594801897],
$       [1826601947906334173, 935618314672187692], [6128279562878556211, 7539083314927041545],
$       [8901811015323578347, -2490127315520150131], [416825278847520891, -7521644640478152336],
$       [-9163195111316461973, 4190040037389493486], [8551663251021355084, -8797669771110662156],
$       [3338372163906101458, -5377855862763136887], [738157342638735597, -8347687489495379974],
$       [-7448462883973082813, 7468535989309770628], [8768335508353842263, -4746351550207596634],
$       [-4120618183059738017, 6384613833970441360], [-1034343613845660016, 4530872806372860337],
$       [-7334864161175798171, -8611686240074483105], [4991670496136470705, -8611686240074483105],
$       [-6796418716506763111, -8611686240074483105], [-8377647251659968875, 259948319819414357],
$       [-6048646777526045097, -8611686240074483105], [-249412198861796765, -8611686240074483105],
$       [7721341808167917933, -8611686240074483105], [-8720988527502351666, -4111979798954787918],
$       [-5717269796379268233, -6894078061200139636], [-5764075326941363362, -1655696122373347321],
$       [5050797588411320198, -2438076746687975039], [6492621031955662617, -987482209870085879],
$       [8663683020258693586, -3564146828177665920], [2533791194537943204, 2258499698904079001],
$       [-4256327449784464273, 7929534827561556498], [-6194819946981373483, 6300693432099540378],
$       [1524638615073905203, 5643291252946419787], [-8913971007938330113, 7165557460458210444],
$       [6186860507781049385, 9041354650559331242], [-5127635096010094313, 3940013457581328705],
$       [-1731492093398319403, 4409818244159468652], [2445119219276381117, 6864744959344327625],
$       [-3083340682140444141, -2759159458188792278], [3563713044372953472, -7645397474979968760],
$       [-7044242150927077638, 7965344372828740324], [5372818108778136536, 913283489617825328],
$       [2506995384528992680, 295067737655963578], [-4869052452512497220, 2716898924549181576],
$       [-5762090506377972073, 1811434118419310484], [663795833969041495, -6721377745453020798],
$       [6206442756589051970, 9137119265608793497], [4110005204867397937, 1290737125516130974],
$       [7913968453808222505, 2028752854632551076], [2175104990764441768, 1998367514034696353],
$       [3510119264236279233, -5732201128205612083], [-4092587346360414429, -5732201128205612083],
$       [7135611574133895484, 5410180461269213208], [3705262268599037544, 7590552343442871166],
$       [-3465075976164860881, 6240535450108353501], [-7850242013450884577, -5024800292413139663],
$       [333301874842652554, 6291634067051520040], [1918059633051611806, 5133275573109290497],
$       [-9158133379238017468, 6600277390058359221], [-2692579722926082370, -5042800582591280303],
$       [-4924723945972730914, -5042800582591280303], [451236948234110730, -5042800582591280303],
$       [-4315793645218699637, -5786257656813405438], [1335191006194509057, 1375148812019120996],
$       [-7480151776892313645, -8141655488557249317], [3152604832199899428, -3934046787601092058],
$       [-4528545603684103025, -7794464006944565708], [1287414124963894903, -2974117497158643719],
$       [8894868453252433699, -1388708096529883608], [-7733748395953923627, -5907946370279713551],
$       [-1471213770159402082, -5787441090060782731], [4889220667993908076, -2062097864188993330],
$       [-338162539243607105, -3268165662828190830], [-6762801583612376610, 4333046944208246667],
$       [-6244850878516861492, -311071920602176948], [-3761336363020268727, 6274490811024465234],
$       [-2045645029275771826, -4534559350754586868], [-3254467883099200877, -5420071290108198448],
$       [-8940990002979762542, 4110457826774952372], [-3722262881154758639, 6794018145404485952],
$       [1391725996931715816, -2717752761680935708], [4175243669924139291, 6256516942806220463],
$       [-3157451711928091624, 1338350904880035853], [1749965118446411445, 2910357614979080247],
$       [-2067094850336030837, 6040905347532641503]],
$  "trailVerbose": [], "trailRewrites": []}
