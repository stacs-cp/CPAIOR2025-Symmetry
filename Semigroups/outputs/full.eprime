language ESSENCE' 1.0

given n: int
find f_FunctionND: matrix indexed by [int(1..n), int(1..n)] of int(1..n)
branching on [f_FunctionND]
find conjure_aux1_FunctionND:
        matrix indexed by [matrix indexed by [int(1..n)] of int(1..n), matrix indexed by [int(1..n)] of int(1..n),
                           int(1..n), int(1..n)] of
            int(1..n)
such that
    and([f_FunctionND[f_FunctionND[i, j], k] = f_FunctionND[i, f_FunctionND[j, k]]
             | i : int(1..n), j : int(1..n), k : int(1..n)]),
    and([and([conjure_aux1_FunctionND
                  [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                   q1_PermutationAsFunction_PermutationFunction_backwards_Function1D,
                   [q14_1, catchUndef(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q14_1], 0);
                        int(1..2)]
                       [toInt(or([q16 = q14_1 | q16 : int(1..n)])) + 1],
                   [q14_2, catchUndef(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q14_2], 0);
                        int(1..2)]
                       [toInt(or([q18 = q14_2 | q18 : int(1..n)])) + 1]]
              =
              [f_FunctionND[q14_1, q14_2],
               catchUndef(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[f_FunctionND[q14_1, q14_2]],
                          0);
                   int(1..2)]
                  [toInt(or([q20 = f_FunctionND[q14_1, q14_2] | q20 : int(1..n)])) + 1]
                  | q14_1 : int(1..n), q14_2 : int(1..n)])
             | q1_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                      int(1..n),
               q1_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                       int(1..n),
               allDiff(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q9] = q8 | q9 : int(1..n)])
                        | q8 : int(1..n)]),
               allDiff(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q12] = q11 | q12 : int(1..n)])
                        | q11 : int(1..n)]),
               and([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q7]]
                    = q7
                        | q7 : int(1..n)]),
               and([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q7]]
                    = q7
                        | q7 : int(1..n)])]),
    and([and([f_FunctionND
                  [[q21_1, catchUndef(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q21_1], 0);
                        int(1..2)]
                       [toInt(or([q23 = q21_1 | q23 : int(1..n)])) + 1],
                   [q21_2, catchUndef(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q21_2], 0);
                        int(1..2)]
                       [toInt(or([q25 = q21_2 | q25 : int(1..n)])) + 1]]
              =
              [conjure_aux1_FunctionND
                   [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                    q1_PermutationAsFunction_PermutationFunction_backwards_Function1D, q21_1, q21_2],
               catchUndef(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D
                              [conjure_aux1_FunctionND
                                   [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                    q1_PermutationAsFunction_PermutationFunction_backwards_Function1D, q21_1, q21_2]],
                          0);
                   int(1..2)]
                  [toInt(or([q27 =
                             conjure_aux1_FunctionND
                                 [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                                  q1_PermutationAsFunction_PermutationFunction_backwards_Function1D, q21_1, q21_2]
                                 | q27 : int(1..n)]))
                   + 1]
                  | q21_1 : int(1..n), q21_2 : int(1..n)])
             | q1_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                      int(1..n),
               q1_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                       int(1..n),
               allDiff(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q9] = q8 | q9 : int(1..n)])
                        | q8 : int(1..n)]),
               allDiff(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q12] = q11 | q12 : int(1..n)])
                        | q11 : int(1..n)]),
               and([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q7]]
                    = q7
                        | q7 : int(1..n)]),
               and([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q7]]
                    = q7
                        | q7 : int(1..n)])]),
    and([flatten([[f_FunctionND[q28, q29] | q29 : int(1..n)] | q28 : int(1..n)]) <=lex
         flatten([[conjure_aux1_FunctionND
                       [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D,
                        q1_PermutationAsFunction_PermutationFunction_backwards_Function1D, q30, q31]
                       | q31 : int(1..n)]
                      | q30 : int(1..n)])
             | q1_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                      int(1..n),
               q1_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                       int(1..n),
               allDiff(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               and([or([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q9] = q8 | q9 : int(1..n)])
                        | q8 : int(1..n)]),
               allDiff(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               and([or([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q12] = q11 | q12 : int(1..n)])
                        | q11 : int(1..n)]),
               and([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D
                        [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q7]]
                    = q7
                        | q7 : int(1..n)]),
               and([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D
                        [q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q7]]
                    = q7
                        | q7 : int(1..n)])]),
    and([and([conjure_aux1_FunctionND[q32, q33, q34, q35] = 1
                  | q32 : matrix indexed by [int(1..n)] of int(1..n), q33 : matrix indexed by [int(1..n)] of int(1..n),
                    q34 : int(1..n), q35 : int(1..n)])
             | q1_PermutationAsFunction_PermutationFunction_forwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                      int(1..n),
               q1_PermutationAsFunction_PermutationFunction_backwards_Function1D : matrix indexed by [int(1..n)] of
                                                                                       int(1..n),
               !allDiff(q1_PermutationAsFunction_PermutationFunction_forwards_Function1D),
               !and([or([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q9] = q8 | q9 : int(1..n)])
                         | q8 : int(1..n)]),
               false, !allDiff(q1_PermutationAsFunction_PermutationFunction_backwards_Function1D),
               !and([or([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q12] = q11
                             | q12 : int(1..n)])
                         | q11 : int(1..n)]),
               false,
               !and([q1_PermutationAsFunction_PermutationFunction_backwards_Function1D
                         [q1_PermutationAsFunction_PermutationFunction_forwards_Function1D[q7]]
                     = q7
                         | q7 : int(1..n)]),
               !and([q1_PermutationAsFunction_PermutationFunction_forwards_Function1D
                         [q1_PermutationAsFunction_PermutationFunction_backwards_Function1D[q7]]
                     = q7
                         | q7 : int(1..n)])])

$ Conjure's
$ {"finds": [{"Name": "f"}], "givens": [{"Name": "n"}], "enumGivens": [], "enumLettings": [],
$  "lettings":
$      [[{"Name": "T"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagUnnamed": "T"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                          {"Reference":
$                               [{"Name": "n"},
$                                {"DeclNoRepr":
$                                     ["Given", {"Name": "n"}, {"DomainInt": [{"TagInt": []}, []]},
$                                      {"NoRegion": []}]}]}]}]]}}]],
$  "unnameds": [[{"Name": "T"}, {"Reference": [{"Name": "n"}, null]}]], "strategyQ": {"PickFirst": []},
$  "strategyA": {"Compact": []},
$  "trailCompact":
$      [[1, 1, 1], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1]],
$  "nameGenState": [["conjure_aux", 2], ["q", 42]], "nbExtraGivens": 0,
$  "representations":
$      [[{"Name": "f"},
$        {"DomainFunction":
$             [{"Function_ND": []}, [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$              {"DomainTuple":
$                   [{"DomainInt":
$                         [{"TagUnnamed": "T"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagUnnamed": "T"}, 1]}},
$                                 {"Reference":
$                                      [{"Name": "n"},
$                                       {"DeclNoRepr":
$                                            ["Given", {"Name": "n"}, {"DomainInt": [{"TagUnnamed": "T"}, []]},
$                                             {"NoRegion": []}]}]}]}]]},
$                    {"DomainInt":
$                         [{"TagUnnamed": "T"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagUnnamed": "T"}, 1]}},
$                                 {"Reference":
$                                      [{"Name": "n"},
$                                       {"DeclNoRepr":
$                                            ["Given", {"Name": "n"}, {"DomainInt": [{"TagUnnamed": "T"}, []]},
$                                             {"NoRegion": []}]}]}]}]]}]},
$              {"DomainInt":
$                   [{"TagUnnamed": "T"},
$                    [{"RangeBounded":
$                          [{"Constant": {"ConstantInt": [{"TagUnnamed": "T"}, 1]}},
$                           {"Reference":
$                                [{"Name": "n"},
$                                 {"DeclNoRepr":
$                                      ["Given", {"Name": "n"}, {"DomainInt": [{"TagUnnamed": "T"}, []]},
$                                       {"NoRegion": []}]}]}]}]]}]}],
$       [{"Name": "n"}, {"DomainInt": [{"TagInt": []}, []]}]],
$  "representationsTree":
$      [[{"Name": "f"},
$        [{"rootLabel": {"Function_ND": []},
$          "subForest":
$              [{"rootLabel": null,
$                "subForest": [{"rootLabel": null, "subForest": []}, {"rootLabel": null, "subForest": []}]},
$               {"rootLabel": null, "subForest": []}]}]],
$       [{"Name": "n"}, [{"rootLabel": null, "subForest": []}]]],
$  "originalDomains":
$      [[{"Name": "n"}, {"DomainInt": [{"TagInt": []}, []]}],
$       [{"Name": "f"},
$        {"DomainFunction":
$             [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$              {"DomainTuple": [{"DomainReference": [{"Name": "T"}, null]}, {"DomainReference": [{"Name": "T"}, null]}]},
$              {"DomainReference": [{"Name": "T"}, null]}]}]],
$  "trailGeneralised":
$      [[-6906542973016060699, -3719647213447155069], [5540639257424529677, -746767053920073212],
$       [-1998216809351301344, -8476077121999700047], [2943827763898610587, 2466913927019206329],
$       [-6411941644284995756, 345206298243719871], [-1774660591505259496, -1170711494413618577],
$       [1784974196837421366, 8879748203551992247], [-3622914020364779749, -4105502493146120848],
$       [-6981982731592605007, 1361423931200859079], [-7426965616596400864, -2210837596506522784],
$       [6280029888767303262, 4683419981270016170], [7306446427021330794, 6128236871643980276],
$       [-7277442327262165608, -1182428797116457646], [-7459883667861587206, 7343845284218241447],
$       [-2017290605218574874, -122193187958321743], [-5253506639381369062, -122193187958321743],
$       [-6035419514702500818, 2569918559173024565], [7835022051645696843, -7149129457570192754],
$       [-6186110902128860169, -8961883438745810970], [-3815813394370999225, -5036538165715817888],
$       [-1250170555069695683, 4276040838919713926], [2435942059658619831, 7436465885945708280],
$       [392609400405530325, -9129871601787058867], [-2873686542315825416, 8885470625513364874],
$       [3182638917250002286, 5302206065107184291], [7754412979916065636, -734053252754620019],
$       [-4833132442575440688, -2648725781973789511], [4732983638930594386, 1920226663560916380],
$       [-2528855510210974373, 2547585977347030238], [744858794979268904, -2648725781973789511],
$       [2729765388819665739, 1920226663560916380], [-460203717879597289, 2547585977347030238],
$       [3419450094889626154, -1608960467751771457], [1128733499827576018, -2648725781973789511],
$       [1468445868973675937, 1920226663560916380], [2092316850593810533, 2547585977347030238],
$       [-8128843083208688949, -8939048891340135113], [184893625374022173, -1751674648945740874],
$       [-3820085406459969581, 4583187298514630603], [-4179545881306169037, -8799216502636613041],
$       [-7645895748793359524, -2648725781973789511], [1639589495067630999, -3671919862405657394],
$       [-6137414659220895074, -2648725781973789511], [-8299024924067171064, -3671919862405657394],
$       [1295463292428017769, 5667563234864644843], [6447777836086746832, -2648725781973789511],
$       [430606963127197202, -3671919862405657394], [-854274487105605595, -8777493262769002009],
$       [-6783390137035132397, 2166118602389652414], [1445679877904113017, -620928124437387069],
$       [-8472330598619782983, 1651217083777206161], [-4442814439473185480, 1920226663560916380],
$       [-5635551432711564392, -3671919862405657394], [3990933977771910349, 1920226663560916380],
$       [-2354669163516822714, -3671919862405657394], [5693713439241393119, -3040503298295319753],
$       [-2217539828293804117, 1920226663560916380], [-3361334116991472152, -3671919862405657394],
$       [-3597967391879761778, -1382249229441211209], [-7643422002061312163, 1155459667265905837],
$       [1181755451006275527, 467332274518088160], [3808809012521823064, -1585579728186258704],
$       [3968923839710100126, -700991235188904669], [7410053432062980216, 2994505388845486124],
$       [5422642889601856418, 8989978555130026805], [6639352535565231464, -4179686098505666976],
$       [-3619950907455168997, 4474379724473522424], [7713073854604312772, 8989978555130026805],
$       [-3377524520025805525, -4179686098505666976], [-5775136023384946389, 4474379724473522424],
$       [-1516435236408020830, 1714987551504350485], [-8943206170923271576, 8989978555130026805],
$       [-2454639399549871965, -4179686098505666976], [5035480528125813227, 4474379724473522424],
$       [-6821700812996410687, -4692814842821819632], [1618712599768595321, 4000731780696694872],
$       [2219873935292494645, 1301233398142947959], [5272895204541125178, -7442812631522415698],
$       [-8609432161396378481, 8989978555130026805], [8471649528266255688, 3086848083262193370],
$       [4190923717051075419, 8989978555130026805], [140759579083226685, 3086848083262193370],
$       [5269039337429542756, 7173806939042857785], [-3954254882274149001, 8989978555130026805],
$       [-6325480414237463931, 3086848083262193370], [7285626726018047512, 715338815929075136],
$       [-5031698900052421703, 6287097959506477132], [7854291984565010887, 3165564634232737583],
$       [-5049134531006682685, 7305092586403162200], [552494700697916778, -4179686098505666976],
$       [66378522754617906, 3086848083262193370], [-862254409877718381, -4179686098505666976],
$       [-2265427741285983116, 3086848083262193370], [7203233368917518607, 3639018018902985989],
$       [7390339058552079263, -4179686098505666976], [-952206236235366844, 3086848083262193370],
$       [-7777174414666444444, 5637070337595058944], [-8291753800818369161, -4705677272552630335],
$       [8428803533647558942, 7739001487129983172], [251980255787003839, 6994659297298911529],
$       [-4057221973260309064, -2894171366495229172], [3886690849158564882, -5105024625408195844],
$       [3345835870429253794, -1977213423061812762], [3636475637993608446, -2818331395526656220],
$       [5735750270661569514, 6795227042910786899], [-6885015249523734132, 5315317524109618293],
$       [8320709209451811788, 7686598587155461229], [-9111355418691970222, -8279991708424119771],
$       [495218819596098682, 4858738994717432283], [-82964158557219726, 5780224086150852509],
$       [-1716733271484568729, -804072981913199359], [-7853093295186540963, -804072981913199359],
$       [2058950475351682972, 2961700168112788161], [8738972853593908389, 4449430609015614375],
$       [358014686264304538, 2098298742566793567], [4394582970445069655, -3932801124757767705],
$       [5202588694520590962, 880845255815829111], [-6657122919825208160, -6896030992160641526],
$       [7447704891243418380, -31096925200278586], [3721667691900382320, -8533689555205616472],
$       [2555912548373231707, -8121825376957859116], [-3912898522008391802, 3702223768324952602],
$       [5589390503498524841, 6377803691148929775], [3548940784560584420, -8883174148108581258],
$       [-3403465188252382229, -1315240132716912298], [-5402422674647579056, -847960380825704042],
$       [7301949123551095970, -6795022781703527261], [-6025233971570197889, -8602031053402553860],
$       [6856009138298729900, -6393373868412121464], [-7714000451294072320, -6073633015163848848],
$       [-6133326719079660003, 123783351624825592], [1368297547686682097, 1829239880067777617],
$       [7656102477693944416, -7625766774964707616]],
$  "trailVerbose": [], "trailRewrites": []}
