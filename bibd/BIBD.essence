language Essence 1.3
$ prob028.essence: Balanced Incomplete Block Design
$ Problem details available at http://www.csplib.org/Problems/prob028/

given v : int(2..)
given k : int(2..)
given lambda : int(1..)

where v > k
where lambda < k
where lambda < v

letting b be (lambda * v * (v - 1)) / (k * (k - 1))
letting r be (lambda * (v - 1)) / (k - 1)

letting Obj   be new type of size v
letting Block be new type of size b

find bibd : matrix indexed by [Obj,Block] of bool

such that

$ column sum
forAll block : Block .
    (sum object : Obj. toInt(bibd[object, block])) = k, 

$ row sum
forAll object : Obj .
    (sum block : Block. toInt(bibd[object, block])) = r, 

$ scalar product of two rows is lambda
forAll object1, object2 : Obj . (object1 != object2) -> 
    ((sum block : Block.
        toInt(bibd[object1,block]) * toInt(bibd[object2, block])) = lambda),


